domain = request.protocol + request.host_with_port
xml.instruct! :xml, :version=>"1.0"
xml.rss(:version=>"2.0") do
  xml.channel do
    xml.title("desphon: deutschsprachige Phantastik online")
    xml.link(domain + url_for(:rss => nil))
    xml.description("Neue Texte bei desphon")
    xml.language("de")
    xml.webMaster("bhaak@gmx.net")
    xml.managingEditor("bhaak@gmx.net")
    xml.pubDate(Time.now.rfc2822)
    xml.image do
      xml.title("desphon: deutschsprachige Phantastik online")
      xml.url(domain + "/desphon/images/desphon.png")
      xml.link(domain + url_for(:controller => "homepage"))
    end
    for text in @texte
      xml.item do
        von = text.onlinetext.autoren.collect { |autor| autor.kurzname }.join(', ') 
        link = domain + url_for(:controller => "onlinetexte", :action => "show", :id => text.onlinetext.id.to_s, :anchor => "rss")
        xml.title(text.onlinetext.titel+' von '+von+' ('+text.mime_typ+')')
        xml.pubDate(text.created_at.rfc2822)
        xml.link(link) 
        xml.guid("onlinetextelinks_"+text.id.to_s, :isPermaLink => false)
        xml.description("<a href='#{link}'>"+text.onlinetext.titel+"</a><br />"+
                        "von<br />"+
                        von+"<br />"+
                        "Format: "+text.mime_typ+"<br />")
      end
    end
    for news in @news
      xml.item do
        xml.title(news.title)
        link = domain + url_for(:controller => "homepage", :action => "index", :anchor => "rss")
        xml.link(link) 
        xml.pubDate(news.created_on.rfc2822)
        xml.guid("neuigkeiten_"+news.id.to_s, :isPermaLink => false)
        xml.description(news.to_html)
      end
    end
  end
end
